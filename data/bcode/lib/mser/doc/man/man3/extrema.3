.TH "extrema" 3 "22 Oct 2006" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
extrema \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBExtremaImage\fP"
.br
.RI "\fIA structure holding image parameters. \fP"
.ti -1c
.RI "struct \fBExtremaParams\fP"
.br
.RI "\fIA structure with MSER detector parameters. \fP"
.ti -1c
.RI "struct \fBt_ipoint\fP"
.br
.RI "\fIInternal structure, holds 2D point coordinates. \fP"
.ti -1c
.RI "struct \fBs_sortpixels\fP"
.br
.RI "\fIInternal structure with intensity histogram. \fP"
.ti -1c
.RI "struct \fBs_region\fP"
.br
.RI "\fIInternal region structure. \fP"
.ti -1c
.RI "struct \fBs_region_equiv\fP"
.br
.RI "\fIInternal structure with a node of the label equivalency tree. \fP"
.ti -1c
.RI "struct \fBs_thresh_par\fP"
.br
.RI "\fIInternal structure with processed detector's parameters. \fP"
.ti -1c
.RI "struct \fBs_borderpixel\fP"
.br
.RI "\fIStructure with pixel of the extended boundary. \fP"
.ti -1c
.RI "struct \fBs_thresh_def\fP"
.br
.RI "\fIInternal structure holding threshold paramaters. \fP"
.ti -1c
.RI "struct \fBBoundaryPoint\fP"
.br
.RI "\fIA structure that holds coordinates of a point in \fBBoundaryRegion\fP i.e. the boundary representation of a region. \fP"
.ti -1c
.RI "struct \fBRLEItem\fP"
.br
.RI "\fIA structure that holds coordinates of a RLE element in \fBRLERegion\fP i.e. the RLE representation of a region. \fP"
.ti -1c
.RI "struct \fBRegion\fP"
.br
.RI "\fIA structure with common statistics of \fBBoundaryRegion\fP and \fBRLERegion\fP. \fP"
.ti -1c
.RI "struct \fBRLERegion\fP"
.br
.RI "\fIDescription of a RLE region. \fP"
.ti -1c
.RI "struct \fBBoundaryRegion\fP"
.br
.RI "\fIDescription of a boundary region. \fP"
.ti -1c
.RI "struct \fBExtremaStats\fP"
.br
.RI "\fITiming statistics of the detector, gathered only if TIME_STATS is set. \fP"
.ti -1c
.RI "struct \fBRLEExtrema\fP"
.br
.RI "\fIOld interface structure that holds result of getRLEExtrema. \fP"
.ti -1c
.RI "struct \fBBoundaryExtrema\fP"
.br
.RI "\fIOld interface structure that holds result of getBoundaryExtrema. \fP"
.ti -1c
.RI "class \fBCPreprocess\fP"
.br
.ti -1c
.RI "class \fBCPreprocessRGBSeq\fP"
.br
.ti -1c
.RI "class \fBCPreprocessRGBPlanes\fP"
.br
.ti -1c
.RI "struct \fBs_suballocator\fP"
.br
.RI "\fIInternal structure with suballocator's data. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef unsigned int \fBt_label\fP"
.br
.ti -1c
.RI "typedef \fBextrema::s_sortpixels\fP \fBt_sortpixels\fP"
.br
.RI "\fIInternal structure with intensity histogram. \fP"
.ti -1c
.RI "typedef unsigned int \fBt_mregion\fP"
.br
.ti -1c
.RI "typedef \fBextrema::s_region\fP \fBt_region\fP"
.br
.RI "\fIInternal region structure. \fP"
.ti -1c
.RI "typedef \fBextrema::s_region_equiv\fP \fBt_region_equiv\fP"
.br
.RI "\fIInternal structure with a node of the label equivalency tree. \fP"
.ti -1c
.RI "typedef \fBextrema::s_thresh_par\fP \fBt_thresh_par\fP"
.br
.RI "\fIInternal structure with processed detector's parameters. \fP"
.ti -1c
.RI "typedef \fBextrema::s_borderpixel\fP \fBt_borderpixel\fP"
.br
.RI "\fIStructure with pixel of the extended boundary. \fP"
.ti -1c
.RI "typedef std::vector< \fBt_borderpixel\fP > \fBpoint_vector\fP"
.br
.RI "\fIVector with extended boundary. \fP"
.ti -1c
.RI "typedef \fBextrema::s_thresh_def\fP \fBt_thresh_def\fP"
.br
.RI "\fIInternal structure holding threshold paramaters. \fP"
.ti -1c
.RI "typedef \fBextrema::s_suballocator\fP \fBt_suballocator\fP"
.br
.RI "\fIInternal structure with suballocator's data. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBEXTREMA_PREPROCESS\fP { \fBPREPROCESS_CHANNEL_none\fP =  0x00000000, \fBPREPROCESS_CHANNEL_intensity\fP =  0x00000001, \fBPREPROCESS_CHANNEL_saturation\fP =  0x00000002, \fBPREPROCESS_CHANNEL_hue\fP =  0x00000003, \fBPREPROCESS_CHANNEL_redblue\fP =  0x00000004, \fBPREPROCESS_CHANNEL_red\fP =  0x00000005, \fBPREPROCESS_CHANNEL_green\fP =  0x00000006, \fBPREPROCESS_CHANNEL_blue\fP =  0x00000007, \fBPREPROCESS_CHANNEL_greenmagenta\fP =  0x00000008, \fBPREPROCESS_CHANNEL_intensity_half\fP =  0x00000009, \fBPREPROCESS_CHANNEL_MASK\fP =  0x0000ffff, \fBPREPROCESS_INTENSITY_none\fP =  0x00000000, \fBPREPROCESS_INTENSITY_MASK\fP =  0xffff0000 }"
.br
.RI "\fIAn enumeration that encodes different preprocessings of an image. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBRegionBoundaries\fP (\fButls::BAry\fP *img, t_LL regions)"
.br
.ti -1c
.RI "void \fBInitRegionRecycling\fP ()"
.br
.ti -1c
.RI "void \fBDestRegionRecycling\fP ()"
.br
.ti -1c
.RI "t_LL \fBGetExtrema\fP (\fButls::BAry\fP *img, \fBt_sortpixels\fP pixels, const \fBExtremaParams\fP &par, bool invert)"
.br
.ti -1c
.RI "void \fBDestRegions\fP (t_LL regions)"
.br
.ti -1c
.RI "\fBBoundaryExtrema\fP \fBgetBoundaryExtrema\fP (const \fBExtremaParams\fP &params, const \fBExtremaImage\fP &image, int both=3)"
.br
.RI "\fIOld interface function, produces BoundaryRegions for a given image. Computes MSERs: both=1 +, both = 2 -, or both = 3 + and -. \fP"
.ti -1c
.RI "\fBRLEExtrema\fP \fBgetRLEExtrema\fP (const \fBExtremaParams\fP &par, const \fBExtremaImage\fP &image, int both=3)"
.br
.RI "\fIOld interface function, produces RLERegions for a given image. Computes MSERs: both=1 +, both = 2 -, or both = 3 + and -. \fP"
.ti -1c
.RI "void \fBextremaPrepareImage\fP (const \fBExtremaParams\fP &params, const \fBExtremaImage\fP &image)"
.br
.RI "\fIPrepares image for detection of MSER regions. \fP"
.ti -1c
.RI "void \fBextremaAttachImage\fP (const \fBExtremaParams\fP &params, \fButls::BAry\fP *image)"
.br
.RI "\fIAssigns already prepared image for detection of MSER regions. \fP"
.ti -1c
.RI "void \fBextremaInvertImage\fP ()"
.br
.RI "\fIInverts image in internal structure. \fP"
.ti -1c
.RI "void \fBextremaBoundaryRegions\fP (const \fBExtremaParams\fP &params, bool inverted, vector< \fBBoundaryRegion\fP > &result)"
.br
.RI "\fIDetects MSERs inverted or not inverted image. \fP"
.ti -1c
.RI "void \fBextremaBoundaryEllRegions\fP (const \fBExtremaParams\fP &params, bool inverted, vector< \fBBoundaryRegion\fP > &result)"
.br
.RI "\fIDetects MSERs inverted or not inverted image and computes centroids and second moments of each region. \fP"
.ti -1c
.RI "void \fBextremaRLERegions\fP (const \fBExtremaParams\fP &params, bool inverted, vector< \fBRLERegion\fP > &result)"
.br
.RI "\fIDetects MSERs inverted or not inverted image and computes centroids and second moments of each region. \fP"
.ti -1c
.RI "void \fBextremaCleanup\fP (bool detach_only=false)"
.br
.RI "\fICleans up internal image structure. \fP"
.ti -1c
.RI "const \fBExtremaStats\fP & \fBextremaStats\fP ()"
.br
.RI "\fIReturns timing statistics. \fP"
.ti -1c
.RI "void \fBexportRLEVector\fP (FILE *fid, vector< \fBRLERegion\fP > &rle_vector)"
.br
.ti -1c
.RI "void \fBexportBoundaryVector\fP (FILE *fid, vector< \fBBoundaryRegion\fP > &boundary_vector)"
.br
.ti -1c
.RI "void \fBexportBoundaryVectorGF\fP (FILE *fid, vector< \fBBoundaryRegion\fP > &boundary_vector)"
.br
.ti -1c
.RI "void \fBexportAffVector\fP (FILE *fid, vector< \fBRLERegion\fP > &rle_vector, double factor, int krys_compat)"
.br
.ti -1c
.RI "void \fBRLE2Ellipse\fP (const vector< \fBRLEItem\fP > &rle, double &barX, double &barY, double &sumX2, double &sumXY, double &sumY2)"
.br
.ti -1c
.RI "void \fBReducedBoundary2RLE\fP (vector< \fBBoundaryPoint\fP > &reduced_boundary, vector< \fBRLEItem\fP > &rle)"
.br
.ti -1c
.RI "void \fBFastSetOptThresholds4StableRegion\fP (\fBt_region\fP *p_r)"
.br
.ti -1c
.RI "void \fBCalcHistogram\fP (\fButls::BAry\fP *&img, \fBt_sortpixels\fP &pixels)"
.br
.ti -1c
.RI "void \fBBinSortPixels\fP (\fButls::BAry\fP *&img, \fBt_sortpixels\fP &pixels)"
.br
.ti -1c
.RI "void \fBInvertImageAndHistogram\fP (\fButls::BAry\fP *img, \fBt_sortpixels\fP &pixels)"
.br
.ti -1c
.RI "void \fBInitSuballocator\fP (\fBt_suballocator\fP *s, size_t blocksize, size_t itemsize, int clear_blocks=0)"
.br
.ti -1c
.RI "void \fBDestSuballocator\fP (\fBt_suballocator\fP *s)"
.br
.ti -1c
.RI "void \fBSuballocatorAddBlock\fP (\fBt_suballocator\fP *s)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBt_thresh_par\fP \fBg_thresh_params\fP"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef unsigned int \fBextrema::t_label\fP"
.PP
.SS "typedef struct \fBextrema::s_sortpixels\fP  \fBextrema::t_sortpixels\fP"
.PP
Internal structure with intensity histogram. 
.PP
.SS "typedef unsigned int \fBextrema::t_mregion\fP"
.PP
.SS "typedef struct \fBextrema::s_region\fP  \fBextrema::t_region\fP"
.PP
Internal region structure. 
.PP
.SS "typedef struct \fBextrema::s_region_equiv\fP  \fBextrema::t_region_equiv\fP"
.PP
Internal structure with a node of the label equivalency tree. 
.PP
.SS "typedef struct \fBextrema::s_thresh_par\fP  \fBextrema::t_thresh_par\fP"
.PP
Internal structure with processed detector's parameters. 
.PP
.SS "typedef struct \fBextrema::s_borderpixel\fP  \fBextrema::t_borderpixel\fP"
.PP
Structure with pixel of the extended boundary. 
.PP
.SS "typedef std::vector<\fBt_borderpixel\fP> \fBextrema::point_vector\fP"
.PP
Vector with extended boundary. 
.PP
.SS "typedef struct \fBextrema::s_thresh_def\fP  \fBextrema::t_thresh_def\fP"
.PP
Internal structure holding threshold paramaters. 
.PP
.SS "typedef struct \fBextrema::s_suballocator\fP  \fBextrema::t_suballocator\fP"
.PP
Internal structure with suballocator's data. 
.PP
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBextrema::EXTREMA_PREPROCESS\fP"
.PP
An enumeration that encodes different preprocessings of an image. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIPREPROCESS_CHANNEL_none \fP\fP
.TP
\fB\fIPREPROCESS_CHANNEL_intensity \fP\fP
.TP
\fB\fIPREPROCESS_CHANNEL_saturation \fP\fP
.TP
\fB\fIPREPROCESS_CHANNEL_hue \fP\fP
.TP
\fB\fIPREPROCESS_CHANNEL_redblue \fP\fP
.TP
\fB\fIPREPROCESS_CHANNEL_red \fP\fP
.TP
\fB\fIPREPROCESS_CHANNEL_green \fP\fP
.TP
\fB\fIPREPROCESS_CHANNEL_blue \fP\fP
.TP
\fB\fIPREPROCESS_CHANNEL_greenmagenta \fP\fP
.TP
\fB\fIPREPROCESS_CHANNEL_intensity_half \fP\fP
.TP
\fB\fIPREPROCESS_CHANNEL_MASK \fP\fP
.TP
\fB\fIPREPROCESS_INTENSITY_none \fP\fP
.TP
\fB\fIPREPROCESS_INTENSITY_MASK \fP\fP

.SH "Function Documentation"
.PP 
.SS "void extrema::RegionBoundaries (\fButls::BAry\fP * img, t_LL regions)"
.PP
.SS "void extrema::InitRegionRecycling ()"
.PP
.SS "void extrema::DestRegionRecycling ()"
.PP
.SS "t_LL extrema::GetExtrema (\fButls::BAry\fP * img, \fBt_sortpixels\fP pixels, const ExtremaParams & par, bool invert)"
.PP
.SS "void extrema::DestRegions (t_LL regions)"
.PP
.SS "\fBBoundaryExtrema\fP extrema::getBoundaryExtrema (const ExtremaParams & params, const ExtremaImage & image, int both = \fC3\fP)"
.PP
Old interface function, produces BoundaryRegions for a given image. Computes MSERs: both=1 +, both = 2 -, or both = 3 + and -. 
.PP
.SS "\fBRLEExtrema\fP extrema::getRLEExtrema (const ExtremaParams & par, const ExtremaImage & image, int both = \fC3\fP)"
.PP
Old interface function, produces RLERegions for a given image. Computes MSERs: both=1 +, both = 2 -, or both = 3 + and -. 
.PP
.SS "void extrema::extremaPrepareImage (const ExtremaParams & params, const ExtremaImage & image)"
.PP
Prepares image for detection of MSER regions. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP a structure ExtremaPars with detector parameters. 
.br
\fIimage\fP a structure \fBExtremaImage\fP with image data.
.RE
.PP
Preparation involves preprocessing i.e. performs demanded preprocess operation given by \fBExtremaParams.preprocess\fP. Image is copied into internal structure and it's boundary is extended by one pixel. 
.PP
\fBSee also:\fP
.RS 4
\fBEXTREMA_PREPROCESS\fP, \fBExtremaParams\fP. 
.RE
.PP

.SS "void extrema::extremaAttachImage (const ExtremaParams & params, \fButls::BAry\fP * image)"
.PP
Assigns already prepared image for detection of MSER regions. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP a structure \fBExtremaParams\fP with detector parameters. 
.br
\fIimage\fP a structure \fButls::BAry\fP (byte image) with image, please note image boundaries should be extended by one pixel, i.e. for an image of size width x height one should use constructor BAry(-1,-1,width,height), that results in array of width+2 x height+2 elements.
.RE
.PP
\fBSee also:\fP
.RS 4
\fButls::BAry\fP, \fBExtremaParams\fP. 
.RE
.PP

.SS "void extrema::extremaInvertImage ()"
.PP
Inverts image in internal structure. 
.PP
.SS "void extrema::extremaBoundaryRegions (const ExtremaParams & params, bool inverted, vector< BoundaryRegion > & result)"
.PP
Detects MSERs inverted or not inverted image. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP a structure \fBExtremaParams\fP with detector parameters. 
.br
\fIinverted\fP a boolean that signalise if internal image structure was or was not inverted. 
.br
\fIresult\fP a vector of \fBBoundaryRegion\fP structures containing regions.
.RE
.PP
\fBNote:\fP
.RS 4
This function does not compute and thus fill values of centroid and second moments in \fBRegion\fP structure. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBBoundaryRegion\fP, \fBExtremaParams\fP 
.RE
.PP

.SS "void extrema::extremaBoundaryEllRegions (const ExtremaParams & params, bool inverted, vector< BoundaryRegion > & result)"
.PP
Detects MSERs inverted or not inverted image and computes centroids and second moments of each region. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP a structure \fBExtremaParams\fP with detector parameters. 
.br
\fIinverted\fP a boolean that signalise if internal image structure was or was not inverted. 
.br
\fIresult\fP a vector of \fBBoundaryRegion\fP structures containing regions.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBBoundaryRegion\fP, \fBExtremaParams\fP 
.RE
.PP

.SS "void extrema::extremaRLERegions (const ExtremaParams & params, bool inverted, vector< RLERegion > & result)"
.PP
Detects MSERs inverted or not inverted image and computes centroids and second moments of each region. 
.PP
\fBParameters:\fP
.RS 4
\fIparams\fP a structure \fBExtremaParams\fP with detector parameters. 
.br
\fIinverted\fP a boolean that signalise if internal image structure was or was not inverted. 
.br
\fIresult\fP a vector of \fBRLERegion\fP structures containing regions.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRLERegion\fP, \fBExtremaParams\fP 
.RE
.PP

.SS "void extrema::extremaCleanup (bool detach_only = \fCfalse\fP)"
.PP
Cleans up internal image structure. 
.PP
\fBParameters:\fP
.RS 4
\fIdetach_only\fP a boolean that specifies if the image is deallocated (false) or not. 
.RE
.PP

.SS "const \fBExtremaStats\fP& extrema::extremaStats ()"
.PP
Returns timing statistics. 
.PP
\fBReturn values:\fP
.RS 4
\fIA\fP structure \fBExtremaStats\fP. 
.RE
.PP

.SS "void extrema::exportRLEVector (FILE * fid, vector< RLERegion > & rle_vector)"
.PP
.SS "void extrema::exportBoundaryVector (FILE * fid, vector< BoundaryRegion > & boundary_vector)"
.PP
.SS "void extrema::exportBoundaryVectorGF (FILE * fid, vector< BoundaryRegion > & boundary_vector)"
.PP
.SS "void extrema::exportAffVector (FILE * fid, vector< RLERegion > & rle_vector, double factor, int krys_compat)"
.PP
.SS "void extrema::RLE2Ellipse (const vector< RLEItem > & rle, double & barX, double & barY, double & sumX2, double & sumXY, double & sumY2)"
.PP
.SS "void extrema::ReducedBoundary2RLE (vector< BoundaryPoint > & reduced_boundary, vector< RLEItem > & rle)"
.PP
.SS "void extrema::FastSetOptThresholds4StableRegion (\fBt_region\fP * p_r)"
.PP
.SS "void extrema::CalcHistogram (\fButls::BAry\fP *& img, \fBt_sortpixels\fP & pixels)"
.PP
.SS "void extrema::BinSortPixels (\fButls::BAry\fP *& img, \fBt_sortpixels\fP & pixels)"
.PP
.SS "void extrema::InvertImageAndHistogram (\fButls::BAry\fP * img, \fBt_sortpixels\fP & pixels)"
.PP
.SS "void extrema::InitSuballocator (\fBt_suballocator\fP * s, size_t blocksize, size_t itemsize, int clear_blocks = \fC0\fP)"
.PP
.SS "void extrema::DestSuballocator (\fBt_suballocator\fP * s)"
.PP
.SS "void extrema::SuballocatorAddBlock (\fBt_suballocator\fP * s)"
.PP
.SH "Variable Documentation"
.PP 
.SS "\fBt_thresh_par\fP \fBextrema::g_thresh_params\fP"
.PP
.SH "Author"
.PP 
Generated automatically by Doxygen from the source code.
